# -*- coding: utf-8 -*-
"""DataPreproccess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v7BNWsJ6uF7-__WAHuCzX_I5APsuP9Cs
"""

import pandas as pd
import os
import numpy as np
from matplotlib import pyplot as plt
from scipy.signal import resample
import scipy.io
import shutil

shutil.copyfile("/content/drive/MyDrive/Bitirme/pure_filtered_all.zip","/content/pure_filtered_all.zip")
shutil.copyfile("/content/drive/MyDrive/Bitirme/contaminated_filtered_all.zip","/content/contaminated_filtered_all.zip")

x_dir="/content/contaminated_filtered_all"
y_dir="/content/pure_filtered_all"
shutil.unpack_archive("contaminated_filtered_all.zip","/content/contaminated_filtered_all" )
shutil.unpack_archive("pure_filtered_all.zip","/content/pure_filtered_all" )

num_channels=19
num_samples=6400
num_sim = 54

sorted(os.listdir(y_dir))

for i, file_name in (enumerate(sorted(os.listdir(x_dir)))):
   print(i)

def groupchannel(dir, size):
    channels = [np.zeros((num_sim, size)) for _ in range(num_channels)]
    for i, file_name in enumerate(sorted(os.listdir(dir))):
        file_path = os.path.join(dir, file_name)
        mat = scipy.io.loadmat(file_path)
        sim = mat["filteredData"]
        for j in range(num_channels):
            channels[j][i, :size] = sim[j, :size]
    return tuple(channels)

ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15,ch16,ch17,ch18,ch19=groupchannel(x_dir,5400)
ch1y,ch2y,ch3y,ch4y,ch5y,ch6y,ch7y,ch8y,ch9y,ch10y,ch11y,ch12y,ch13y,ch14y,ch15y,ch16y,ch17y,ch18y,ch19y=groupchannel(y_dir,5400)

plt.plot(ch19[10])

def resamplech(channel):
  resampled=np.zeros((num_sim, num_samples))

  for i in range(54):
    resampled[i]=resample(channel[i,:],num_samples,axis=0)
  return resampled;

ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15,ch16,ch17,ch18,ch19=[resamplech(i) for i in (ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15,ch16,ch17,ch18,ch19)]
ch1y,ch2y,ch3y,ch4y,ch5y,ch6y,ch7y,ch8y,ch9y,ch10y,ch11y,ch12y,ch13y,ch14y,ch15y,ch16y,ch17y,ch18y,ch19y=[resamplech(i) for i in (ch1y,ch2y,ch3y,ch4y,ch5y,ch6y,ch7y,ch8y,ch9y,ch10y,ch11y,ch12y,ch13y,ch14y,ch15y,ch16y,ch17y,ch18y,ch19y)]

x=0
data=np.zeros((num_channels,num_sim,80,80))
for channels in ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15,ch16,ch17,ch18,ch19:
 channels=[np.reshape(i,(80,80)) for i in (channels)]
 data[x]=channels
 x+=1

x=0
data_y=np.zeros((num_channels,num_sim,80,80))
for channels_y in ch1y,ch2y,ch3y,ch4y,ch5y,ch6y,ch7y,ch8y,ch9y,ch10y,ch11y,ch12y,ch13y,ch14y,ch15y,ch16y,ch17y,ch18y,ch19y:
 channels_y=[np.reshape(i,(80,80)) for i in (channels_y)]
 data_y[x]=channels
 x+=1

plt.imshow(data[18,19],cmap="gray")

plt.imshow(data_y[18,19],cmap="gray")

plt.imshow(data_y[5,19]-data[5,19],cmap="gray")

plt.imshow(data_y[8,19]-data[8,19],cmap="gray")

np.shape(data_y)

np.save('data.npy', data)
np.save('data_y.npy', data_y)